{"version":3,"sources":["utils/API.js","components/tableBody/index.js","components/tableHeader/index.js","components/wrapper/index.js","components/navbar/index.js","pages/People.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","TableBody","props","people","map","user","key","cell","name","first","last","email","phone","src","picture","thumbnail","TableHeader","sortByFirstName","sortByLastName","scope","href","onClick","Wrapper","children","className","Navbar","handleInputChange","handleSubmit","type","placeholder","aria-label","onChange","People","state","search","results","event","preventDefault","setState","target","value","renderSingleView","sortFirst","sort","a","b","nameA","toUpperCase","nameB","compare","sortLast","API","then","res","data","catch","err","console","log","person","this","filter","includes","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0b211dcf.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getPeople: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=30\");\r\n    }\r\n};","import React from \"react\";\r\n\r\nexport const TableBody = (props) => {\r\n\r\n    return (\r\n        <tbody>\r\n            {props.people.map(user => (\r\n                <tr key={user.cell}>\r\n                    <td>{user.name.first}</td>\r\n                    <td>{user.name.last}</td>\r\n                    <td>{user.email}</td>\r\n                    <td>{user.phone}</td>\r\n                    <td><img src={user.picture.thumbnail} /></td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport const TableHeader = (props) => {\r\n  const { sortByFirstName, sortByLastName } = props\r\nreturn (\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\"><a href=\"#SortFirst\" onClick={() => sortByFirstName()}>First</a></th>\r\n      <th scope=\"col\"><a href=\"#SortLast\" onClick={() => sortByLastName()}>Last</a></th>\r\n      <th scope=\"col\">Email</th>\r\n      <th scope=\"col\">Phone Number</th>\r\n      <th scope=\"col\">Picture</th>\r\n    </tr>\r\n    </thead>\r\n);\r\n}","import React from \"react\";\r\n\r\n\r\nfunction Wrapper({ children }) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            { children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nexport const Navbar = (props) => {\r\n    let { handleInputChange, handleSubmit } = props\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <h1>Employee Search</h1>\r\n        <form className=\"form-inline my-2 my-lg-0\">\r\n            <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search by first name\" aria-label=\"Search\" onChange={handleInputChange} />\r\n            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" onClick={handleSubmit}>Search</button>\r\n        </form>\r\n    </nav>\r\n\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport { TableBody } from \"../components/tableBody\";\r\nimport { TableHeader } from \"../components/tableHeader\";\r\nimport Wrapper from \"../components/wrapper\";\r\nimport { Navbar } from \"../components/navbar\";\r\n\r\n\r\nclass People extends Component {\r\n    state = {\r\n        people: [],\r\n        search: \"\",\r\n        results: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getPeople()\r\n            .then(res =>\r\n                this.setState({\r\n                    people: res.data.results\r\n                })\r\n            )\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            search: event.target.value\r\n        })\r\n\r\n    }\r\n    handleSubmit(person) {\r\n        this.state.people.filter(person => {\r\n            return person.name.first.includes(this.state.search)\r\n        });\r\n    }\r\n\r\n    renderSingleView = () => { }\r\n    sortByFirstName = () => {\r\n        let sortFirst = this.state.people.sort(sortName)\r\n        function sortName(a, b) {\r\n            const nameA = a.name.first.toUpperCase();\r\n            const nameB = b.name.first.toUpperCase();\r\n\r\n            let compare = 0;\r\n            if (nameA > nameB) {\r\n                compare = 1;\r\n            } else if (nameA < nameB) { compare = -1; }\r\n            return compare;\r\n        }\r\n        this.setState({\r\n            people: sortFirst\r\n        });\r\n    }\r\n\r\n    sortByLastName = () => {\r\n        let sortLast = this.state.people.sort(sortName)\r\n        function sortName(a, b) {\r\n            const nameA = a.name.last.toUpperCase();\r\n            const nameB = b.name.last.toUpperCase();\r\n\r\n            let compare = 0;\r\n            if (nameA > nameB) {\r\n                compare = 1;\r\n            } else if (nameA < nameB) { compare = -1; }\r\n            return compare;\r\n        }\r\n        this.setState({\r\n            people: sortLast\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Wrapper>\r\n                    <Navbar\r\n                        handleInputChange={this.handleInputChange}\r\n                        handleSubmit={this.handleSubmit}\r\n                    />\r\n                    <table className=\"table table-dark\">\r\n                    <TableHeader\r\n                        sortByFirstName={this.sortByFirstName}\r\n                        sortByLastName={this.sortByLastName}\r\n                    />\r\n                    <TableBody\r\n                        people={this.state.people}  \r\n                    />\r\n                    </table>\r\n                </Wrapper>\r\n                {/* <Table people={this.state.people}/> */}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default People;\r\n\r\n\r\n\r\n","import React from \"react\";\nimport People from \"./pages/People\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <People/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}